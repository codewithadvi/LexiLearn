# 1. Third-party Imports
from sqlalchemy.orm import Session
from fastapi import HTTPException, status

# 2. Local Application Imports
from ..models import deck_model
from ..schemas import deck_schema

# --- READ Operations ---

def get_all_decks(db: Session):
    """
    Logic to retrieve all decks from the database.
    """
    return db.query(deck_model.Deck).all()

def get_deck_by_id(db: Session, deck_id: int):
    """
    Logic to retrieve a single deck by its ID.
    """
    deck = db.query(deck_model.Deck).filter(deck_model.Deck.id == deck_id).first()
    if not deck:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="Deck not found")
    return deck

# --- CREATE Operations ---

def create_deck(db: Session, deck: deck_schema.DeckCreate):
    """
    Logic to create a new deck in the database.
    """
    # 1. Create a database model instance from the API schema data.
    db_deck = deck_model.Deck(name=deck.name)
    
    # 2. Add the new model instance to the database session (staging area).
    db.add(db_deck)
    
    # 3. Commit the transaction to save it permanently to the database.
    db.commit()
    
    # 4. Refresh the instance to get the new ID generated by the database.
    db.refresh(db_deck)
    
    return db_deck

# --- UPDATE Operations ---

def update_deck(db: Session, deck_id: int, deck_update: deck_schema.DeckUpdate):
    """
    Logic to update an existing deck in the database.
    """
    db_deck = get_deck_by_id(db=db, deck_id=deck_id) # Reuse our get_deck_by_id function
    
    # Get the data from the Pydantic schema, excluding any fields that were not sent.
    update_data = deck_update.model_dump(exclude_unset=True)
    
    # Loop through the provided data and update the database model.
    for key, value in update_data.items():
        setattr(db_deck, key, value)
        
    db.commit()
    db.refresh(db_deck)
    return db_deck

# --- DELETE Operations ---

def delete_deck(db: Session, deck_id: int):
    """
    Logic to delete a deck from the database.
    """
    db_deck = get_deck_by_id(db=db, deck_id=deck_id) # Reuse our get_deck_by_id function
        
    db.delete(db_deck)
    db.commit()
    
    # For a DELETE operation, we don't return the object. 
    # We can return a success message or nothing.
    return {"detail": "Deck deleted successfully"}
